/*
Прогресс бар - демонстрация работы с динамически изменяющимися элементами
Задача: остановить прогресс-бар, когда он достигнет 75%
*/

package ru.merion.aqa.lesson5;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import ru.merion.aqa.WebDriverFactory;

/**
 * Класс демонстрирует работу с динамическим прогресс-баром.
 * Задача: запустить прогресс-бар и остановить его при достижении 75%.
 *
 * Используется polling-подход (опрос) с Thread.sleep() для мониторинга значения.
 */
public class Progressbar {
    public static void main(String[] args) throws InterruptedException {

        // Инициализация WebDriver для браузера Chrome
        WebDriver driver = WebDriverFactory.create("chrome");

        // Открываем страницу с прогресс-баром
        driver.get("http://uitestingplayground.com/progressbar");

        // ========== ЗАПУСК ПРОГРЕСС-БАРА ==========
        // Кликаем по кнопке "Start" для запуска прогресса
        // После клика прогресс-бар начинает расти от 0% до 100%
        driver.findElement(By.cssSelector("#startButton")).click();

        /*
        ========== РЕШЕНИЕ ЗАДАЧИ: POLLING-ПОДХОД ==========

        Задача: остановить прогресс-бар при достижении 75%

        Подход:
        1. Циклически опрашиваем (polling) текущее значение прогресса
        2. Проверяем, достигло ли значение 75%
        3. При достижении - кликаем "Stop" и выходим из цикла

        Альтернативные подходы:
        - Explicit Wait с custom ExpectedCondition
        - FluentWait с кастомным условием
        */

        // ========== ЦИКЛ МОНИТОРИНГА ПРОГРЕССА ==========
        // Максимум 1000 итераций - защита от бесконечного цикла
        // При интервале 100 мс это дает максимум 100 секунд ожидания
        for (int i = 0; i < 1000; i++){

            // Получаем текущее значение прогресса из атрибута aria-valuenow
            // aria-valuenow - ARIA-атрибут для доступности, содержит числовое значение (0-100)
            // Этот атрибут используется для программного чтения состояния прогресс-бара
            String value = driver.findElement(By.cssSelector("#progressBar")).getAttribute("aria-valuenow");

            // Выводим текущее значение в консоль для отладки
            // Полезно для визуального контроля работы скрипта
            System.out.println(value);

            // ========== ПАУЗА МЕЖДУ ПРОВЕРКАМИ ==========
            // Thread.sleep(100) - ждем 100 миллисекунд (0.1 сек) перед следующей проверкой
            // Это интервал опроса (polling interval)
            // Слишком частые проверки (< 50 мс) - лишняя нагрузка на браузер
            // Слишком редкие проверки (> 500 мс) - можем пропустить целевое значение
            Thread.sleep(100);

            // ========== ПРОВЕРКА УСЛОВИЯ ОСТАНОВКИ ==========
            // Преобразуем строку в число и проверяем: достигли ли 75%?
            // Integer.parseInt() - конвертирует строку "75" в число 75
            // Используем >= (больше или равно), потому что прогресс может "перескочить" 75
            // Например: 74% -> 76%, минуя точное значение 75%
            if (Integer.parseInt(value) >= 75 ){

                // Останавливаем прогресс-бар кликом по кнопке "Stop"
                driver.findElement(By.cssSelector("#stopButton")).click();

                // Выходим из цикла - задача выполнена
                // break прерывает выполнение цикла, переходим к следующему коду
                break;
            }
        }
        // Если цикл завершился без break (1000 итераций),
        // значит что-то пошло не так - прогресс не достиг 75% за 100 секунд

        // Выводим сообщение о завершении работы
        System.out.println("Finished");

        // ========== ЗАКРЫТИЕ БРАУЗЕРА ==========
        // Освобождаем ресурсы и закрываем браузер
        driver.quit();
    }
}