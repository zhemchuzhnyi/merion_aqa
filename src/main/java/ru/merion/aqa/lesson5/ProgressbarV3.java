/*
Прогресс бар - пример 3 (с таймаутом)
Улучшенная версия с защитой от бесконечного цикла через временной таймаут
*/

package ru.merion.aqa.lesson5;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import ru.merion.aqa.WebDriverFactory;

/**
 * Третий вариант решения задачи с прогресс-баром.
 * Основное улучшение: добавлена защита от бесконечного цикла через таймаут.
 *
 * Преимущества перед V2:
 * - ✅ Есть временной лимит (15 секунд)
 * - ✅ Тест гарантированно завершится
 * - ✅ Можно использовать в автоматизации
 *
 * Недостатки:
 * - ⚠️ В коде есть логическая ошибка (условие >= 101)
 * - ⚠️ Нет обработки исключений
 * - ⚠️ Нет паузы между итерациями (перегрузка браузера)
 */
public class ProgressbarV3 {
    public static void main(String[] args) throws InterruptedException {

        // Инициализация WebDriver для браузера Chrome
        WebDriver driver = WebDriverFactory.create("chrome");

        // Открываем страницу с прогресс-баром
        driver.get("http://uitestingplayground.com/progressbar");

        // Запускаем прогресс-бар кликом по кнопке "Start"
        driver.findElement(By.cssSelector("#startButton")).click();

        // ========== НАСТРОЙКА ТАЙМАУТА ==========
        // Устанавливаем максимальное время ожидания: 15 секунд = 15000 миллисекунд
        // Если за это время условие не выполнится, тест завершится с сообщением
        long timeToWait = 15 * 1000;

        // Небольшая пауза после запуска прогресс-бара
        // Даем браузеру время начать обновление значения
        Thread.sleep(100);

        // ========== ФИКСИРУЕМ СТАРТОВОЕ ВРЕМЯ ==========
        // System.currentTimeMillis() возвращает текущее время в миллисекундах
        // с 1 января 1970 года (Unix Epoch Time)
        // Это наша "точка отсчета" для измерения прошедшего времени
        long startTime = System.currentTimeMillis();

        // ========== ЦИКЛ С ВРЕМЕННОЙ ЗАЩИТОЙ ==========
        // while (true) - всё ещё бесконечный цикл, НО теперь есть проверка таймаута
        while (true) {

            // ========== ПРОВЕРКА ТАЙМАУТА (ПЕРВОЕ УСЛОВИЕ ВЫХОДА) ==========
            // Сравниваем текущее время с "временем смерти" (startTime + timeToWait)
            // Если прошло >= 15 секунд → выходим из цикла
            //
            // Пример:
            // startTime = 1000000 мс
            // timeToWait = 15000 мс
            // "Время смерти" = 1015000 мс
            // Если currentTimeMillis() >= 1015000 → таймаут
            if (System.currentTimeMillis() >= startTime + timeToWait) {
                // Выводим сообщение о таймауте
                // Это значит, что за 15 секунд условие не выполнилось
                System.out.println("Не дождались исполнения условий");

                // Выходим из цикла по таймауту
                // ✅ ЗАЩИТА: Гарантирует завершение теста максимум через 15 секунд
                break;
            }

            // ========== ПОЛУЧЕНИЕ ТЕКУЩЕГО ЗНАЧЕНИЯ ПРОГРЕССА ==========
            // Читаем атрибут aria-valuenow, который содержит процент прогресса (0-100)
            // ⚠️ ПРОБЛЕМА: Нет паузы перед этим запросом!
            // Браузер будет "бомбардироваться" запросами тысячи раз в секунду
            String value = driver.findElement(By.cssSelector("#progressBar"))
                    .getAttribute("aria-valuenow");

            // ========== ПРОВЕРКА ЦЕЛЕВОГО ЗНАЧЕНИЯ (ВТОРОЕ УСЛОВИЕ ВЫХОДА) ==========
            // ⚠️ ЛОГИЧЕСКАЯ ОШИБКА: Проверяем >= 101, но прогресс достигает максимум 100!
            //
            // Правильное условие должно быть: >= 75 (как в задании)
            // С текущим условием >= 101 этот блок НИКОГДА не выполнится,
            // потому что прогресс-бар останавливается на 100%
            //
            // Что происходит:
            // 1. Прогресс растет: 0% → 10% → 20% → ... → 100%
            // 2. Условие value >= 101 всегда false (100 не >= 101)
            // 3. Цикл продолжается до таймаута (15 секунд)
            // 4. Срабатывает первый if (таймаут)
            if (Integer.parseInt(value) >= 101 ) {
                // Этот код НЕДОСТИЖИМ с текущим условием!
                // Останавливаем прогресс-бар
                driver.findElement(By.cssSelector("#stopButton")).click();

                // Выходим из цикла по достижению цели
                break;
            }

            // ⚠️ КРИТИЧЕСКАЯ ПРОБЛЕМА: Нет Thread.sleep()!
            // Цикл выполняется миллионы раз в секунду
            // Каждая итерация = запрос к браузеру через WebDriver
            // Результат: огромная нагрузка на CPU и браузер
            //
            // Должно быть: Thread.sleep(100); здесь
        }
        // До этой строки доходим только при break (таймаут или достижение цели)

        // Выводим сообщение о завершении
        System.out.println("Finished");

        // Закрываем браузер и освобождаем ресурсы
        driver.quit();
    }
}